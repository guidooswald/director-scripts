#
# (c) Copyright 2015 Cloudera, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# Simple AWS Cloudera Altus Director configuration file with a Cloudera Manager configuration
# that satisfies the requirements for setting up a kerberized Cloudera Manager. All clusters
# setup within a kerberized Cloudera Manager get automatically kerberized.
#

#
# Cluster name
#

name: Enable-Kerberos-Sample

#
# Cloud provider configuration (credentials, region or zone and optional default image)
#

provider {
    type: aws

    #
    # Get AWS credentials from the OS environment
    # See http://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html
    #
    # If specifying the access keys directly and not through variables, make sure to enclose
    # them in double quotes.

    accessKeyId: ${?AWS_ACCESS_KEY_ID}
    secretAccessKey: ${?AWS_SECRET_ACCESS_KEY}

    #
    # ID of the Amazon AWS region to use
    # See: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html
    #

    region: us-east-1

    #
    # Region endpoint (if you are using one of the Gov. regions)
    #

    # regionEndpoint: ec2.us-gov-west-1.amazonaws.com

    #
    # ID of the VPC subnet
    # See: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html
    #

    subnetId: subnet-REPLACE-ME

    #
    # Comma separated list of security group IDs
    # See: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html
    #

    securityGroupsIds: sg-REPLACE-ME

    #
    # A prefix that Cloudera Altus Director should use when naming the instances (this is not part of the hostname)
    #

    instanceNamePrefix: cd-ha
}

#
# SSH credentials to use to connect to the instances
#

ssh {
    username: ec2-user # for RHEL image
    privateKey: REPLACE-ME # with an absolute path to .pem file
}

#
# A list of instance types to use for group of nodes or management services
#

instances {
    m42x {
      type: m4.2xlarge

      #
      # Amazon Machine Image (AMI)
      #
      # See: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html
      # Compatibility matrix: https://aws.amazon.com/amazon-linux-ami/instance-type-matrix/
      #
      # Red Hat Enterprise Linux AMI IDs: http://aws.amazon.com/partners/redhat/
      # We support Red Hat Enterprise Linux 6.4 (64bit) 64bit PV or HVM
      #

      image: ami-REPLACE-ME

      #
      # Name of the IAM Role to use for this instance type
      # http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html
      #

      # iamProfileName: REPLACE-ME

      tags {
        owner: ${?USER}
      }

      bootstrapScripts: [ """#!/bin/sh

# This is an embedded bootstrap script that runs as root and can be used to customize
# the instances immediately after boot and before any other Cloudera Altus Director action

# If the exit code is not zero Cloudera Altus Director will automatically retry

echo 'Hello World!'
exit 0

""" ]
    }

    i2x {
      type: i2.xlarge
      image: ami-HVM-REPLACE-ME

      tags {
        owner: ${?USER}
      }
    }

    d2x {
      type: d2.xlarge
      image: ami-HVM-REPLACE-ME

      tags {
        owner: ${?USER}
      }
    }


    t2l {   # only suitable as a gateway
      type: t2.large
      image: ami-HVM-REPLACE-ME

      tags {
        owner: ${?USER}
      }
    }
}

#
# Configuration for kerberized Cloudera Manager.
#

cloudera-manager {

    instance: ${instances.m42x} {
        tags {
            application: "Cloudera Manager 5"
        }
    }

    #
    # Automatically activate 60-Day Cloudera Enterprise Trial
    #

    enableEnterpriseTrial: true

    # Install the unlimited strength JCE policy files for higher levels of encryption.
    # Prior to setting this to true, confirm that you understand the legal ramifications
    # of using unlimited JCE policy files in your country.
    unlimitedJce: true

    # An administrative Kerberos account capable of creating principals on the KDC that
    # Cloudera Manager will be using. This will typically be in the format:
    #    Principal@YOUR.KDC.REALM
    krbAdminUsername: "REPLACE-ME"

    # The password for the administrative Kerberos account.
    krbAdminPassword: "REPLACE-ME"

    configs {
        CLOUDERA_MANAGER {
            # The type of KDC Cloudera Manager will be using. Valid values are "MIT KDC"
            # and "Active Directory"
            KDC_TYPE: "Active Directory"

            # The KDC host name or IP address.
            KDC_HOST: "REPLACE-ME"

            # The security realm that your KDC uses. This will be of the format of a fully
            # qualified domain name:
            #    YOUR.KDC.REALM
            SECURITY_REALM: "REPLACE-ME"

            # The Active Directory KDC domain. Only applicable to Active Directory KDCs. This
            # will be in the format of an X.500 Directory Specification:
            #    DC=domain,DC=example,DC=com
            AD_KDC_DOMAIN: "REPLACE-ME"

            # Allow Cloudera Manager to deploy Kerberos configurations to hosts. This should
            # be set to true unless you have an alternate mechanism to generate or retrieve the
            # Kerberos configuration on your Cloudera Manager node instances.
            KRB_MANAGE_KRB5_CONF: true

            # The encryption types your KDC supports. Some of those listed below will require the
            # unlimited strength JCE policy files.
            KRB_ENC_TYPES: "aes256-cts aes128-cts des3-hmac-sha1 arcfour-hmac des-hmac-sha1 des-cbc-md5 des-cbc-crc"

            # There are many more optional Kerberos configuration options available to Cloudera Manager.
            # Please refer to the Kerberos section on
            # http://www.cloudera.com/content/cloudera/en/documentation/core/latest/topics/cm_props_cmserver.html
            # for more details.
        }
    }

}

#
# Cluster description
#

cluster {

    # List the products and their versions that need to be installed.
    # These products must have a corresponding parcel in the parcelRepositories
    # configured above. The specified version will be used to find a suitable
    # parcel. Specifying a version that points to more than one parcel among
    # those available will result in a configuration error. Specify more granular
    # versions to avoid conflicts.

    products {
      CDH: 5
    }

    #
    # Optional override of CDH parcel repositories
    #

    # parcelRepositories: ["https://archive.cloudera.com/cdh5/parcels/5.7/"]

    # NOTE: Sentry is only supported in Cloudera Manager versions 5.1 onward.
    services: [HDFS, YARN, ZOOKEEPER, HBASE, HIVE, HUE, OOZIE, SENTRY, SPARK_ON_YARN]

    #
    # Optional custom service configurations
    #
    # configs {
    #     HDFS {
    #       dfs_block_size: 134217728
    #     }
    #
    #     MAPREDUCE {
    #       mapred_system_dir: /user/home
    #       mr_user_to_impersonate: mapred1
    #     }
    # }

    #
    # Optional configuration for existing external database for Hive Metastore or Sentry databases
    #

    # databases {
    #     HIVE {
    #         type: postgresql
    #         host: db.example.com
    #         port: 123
    #         user: hive
    #         password: pass
    #         name: hive_db
    #     },
    #     SENTRY {
    #         type: postgresql
    #         host: db.example.com
    #         port: 123
    #         user: sentry
    #         password: pass
    #         name: sentry_db
    #     },
    # }

    #
    # Optional configuration for creating external database on the fly for Hive Metastore or Sentry
    # database
    #

    # databaseTemplates: {
    #     HIVE {
    #         name: hivetemplate
    #         databaseServerName: mysql1 # Must correspond to an external database server named above
    #         databaseNamePrefix: hivemetastore
    #         usernamePrefix: hive
    #     },
    #     SENTRY {
    #         name: sentrytemplate
    #         databaseServerName: mysql1
    #         databaseNamePrefix: sentrydb
    #         usernamePrefix: sentry
    #     },
    # }

    masters {
      count: 1

      instance: ${instances.i2x} {
        tags {
          group: master
        }
      }

      roles {
        HDFS: [NAMENODE, SECONDARYNAMENODE]
        YARN: [RESOURCEMANAGER, JOBHISTORY]
        ZOOKEEPER: [SERVER]
        HBASE: [MASTER]
        HIVE: [HIVESERVER2, HIVEMETASTORE]
        HUE: [HUE_SERVER]
        OOZIE: [OOZIE_SERVER]
        SENTRY: [SENTRY_SERVER]
        SPARK_ON_YARN: [SPARK_YARN_HISTORY_SERVER]
      }

      # Optional custom role configurations
      # configs {
      #   HDFS {
      #      NAMENODE {
      #        dfs_name_dir_list: /data/nn
      #        namenode_port: 1234
      #      }
      #   }
      # }
    }

    workers {
      count: 9
      #
      # Minimum number of instances required to set up the cluster.
      # Fail and quit if minCount number of instances is not available in this cloud
      # environment. Else, continue setting up the cluster.
      #
      minCount: 5

      instance: ${instances.d2x} {

        # Put all cluster nodes in a placement group for improved network performance
        # Note: this only works for a limited set of instances
        # http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html

        # placementGroup: REPLACE-ME

        tags {
          group: worker
        }
      }

      roles {
        HDFS: [DATANODE]
        YARN: [NODEMANAGER]
        HBASE: [REGIONSERVER]
      }

      # Optional custom role configurations

      # configs {
      #   HDFS {
      #     DATANODE {
      #        dfs_data_dir_list: /data/dn
      #      }
      #   }
      #   HBASE {
      #     REGIONSERVER {
      #       hbase_regionserver_java_heapsize: 4000000000
      #     }
      #   }
      # }
    }

    gateways {
      count: 1

      instance: ${instances.t2l} {
        tags {
          group: gateway
        }
      }

      roles {
        HIVE: [GATEWAY]
        SPARK_ON_YARN: [GATEWAY]
      }

      # Optional custom role configurations
      # configs {
      #   HIVE {
      #     GATEWAY {
      #       hive_metastore_timeout: 3000
      #       client_config_root_dir: /etc/hive
      #     }
      #   }
      # }
    }

    postCreateScripts: ["""#!/bin/sh

# This is an embedded post creation script that runs as root and can be used to
# customize the cluster after it has been created.

# If the exit code is not zero Cloudera Altus Director will fail

# Post creation scripts also have access to the following environment variables:

#    DEPLOYMENT_HOST_PORT
#    ENVIRONMENT_NAME
#    DEPLOYMENT_NAME
#    CLUSTER_NAME
#    CM_USERNAME
#    CM_PASSWORD

echo 'Hello World!'
exit 0
    """,
    """#!/usr/bin/python

# Additionally, multiple post-creation scripts can be supplied.  They will run
# in the order they are listed here.  Interpeters other than bash can be used
# as well.

print 'Hello again!'
    """]

    # For more complex scripts, post creation scripts can be supplied via path,
    # where they will be read from the local filesystem.  They will run after
    # any scripts supplied in the previous postCreateScripts section.
    # postCreateScriptsPaths: ["/tmp/test-script.sh",
    #                         "/tmp/test-script.py"]

    preTerminateScripts: ["""#!/bin/sh

# This is an embedded pre-termination script that runs as root and can be used to
# customize the cluster after it has been created.

# If the exit code is not zero Cloudera Altus Director will fail

# Pre terminate scripts also have access to the following environment variables:

#    DEPLOYMENT_HOST_PORT
#    ENVIRONMENT_NAME
#    DEPLOYMENT_NAME
#    CLUSTER_NAME
#    CM_USERNAME
#    CM_PASSWORD

echo 'Goodbye World!'
exit 0
    """,
    """#!/usr/bin/python

# Additionally, multiple pre terminate scripts can be supplied.  They will run
# in the order they are listed here.  Interpeters other than bash can be used
# as well.

print 'Goodbye again!'
        """]

    # For more complex scripts, pre terminate scripts can be supplied via path,
    # where they will be read from the local filesystem.  They will run after
    # any scripts supplied in the previous preTerminateScripts section.
    # preTerminateScriptsPaths: ["/tmp/test-script.sh",
    #                            "/tmp/test-script.py"]
}
