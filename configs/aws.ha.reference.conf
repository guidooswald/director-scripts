
#
# Copyright (c) 2015 Cloudera, Inc. All rights reserved.
#

#
# Sample AWS Cloudera Altus Director configuration file illustrating how to set up a highly available
# cluster based on the Cloudera AWS reference architecture:
# http://www.cloudera.com/documentation/other/reference-architecture/PDF/cloudera_ref_arch_aws.pdf
#
# This configuration file is intended to demonstrate how to set up high availability clusters
# only. Please refer to the aws.reference.conf file and the Cloudera Altus Director documentation for
# further details on how to use Cloudera Altus Director.
#

#
# Cluster name
#

name: C6-HAReference-AWS

#
# Cloud provider configuration (credentials, region or zone and optional default image)
#

provider {
  type: aws

  #
  # Get AWS credentials from the OS environment
  # See http://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html
  #
  # If specifying the access keys directly and not through variables, make sure to enclose
  # them in double quotes.
  #
  # Leave the accessKeyId and secretAccessKey fields blank when running on an instance
  # launched with an IAM role.

  # accessKeyId: ${?AWS_ACCESS_KEY_ID}
  # secretAccessKey: ${?AWS_SECRET_ACCESS_KEY}

  #
  # ID of the Amazon AWS region to use
  # See: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html
  #

  region: region-REPLACE-ME

  #
  # Region endpoint (if you are using one of the Gov. regions)
  #

  # regionEndpoint: ec2.us-gov-west-1.amazonaws.com

  #
  # ID of the VPC subnet
  # See: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html
  #

  subnetId: subnet-REPLACE-ME

  #
  # Comma separated list of security group IDs
  # See: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html
  #
  # Default security group

  securityGroupsIds: sg-REPLACE-ME

  #
  # A prefix that Cloudera Altus Director should use when naming the instances (this is not part of the hostname)
  #

  instanceNamePrefix: cloudera-director

  #
  # Specify a size for the root volume (in GBs). Cloudera Altus Director will automatically expand the
  # filesystem so that you can use all the available disk space for your application
  # See: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/storage_expand_partition.html
  #

  # rootVolumeSizeGB: 100 # defaults to 50 GB if not specified

  #
  # Specify the type of the EBS volume used for the root partition. Defaults to gp2
  # See: http://aws.amazon.com/ebs/details/
  #

  # rootVolumeType: gp2 # OR standard (for EBS magnetic)

  #
  # Whether to associate a public IP address with instances or not. If this is false
  # we expect instances to be able to access the internet using a NAT instance
  #
  # Currently the only way to get optimal S3 data transfer performance is to assign
  # public IP addresses to your instances and not use NAT instances (public subnet setup)
  #
  # See: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-ip-addressing.html
  #

  # associatePublicIpAddresses: true

}

#
# SSH credentials to use to connect to the instances
#

ssh {
  username: ec2-user # for RHEL image
  privateKey: REPLACE-ME # with an absolute path to .pem file
}

#
# These instance properties will be applied to all instances.
#

common-instance-properties {
  #
  # Amazon Machine Image (AMI)
  #
  # See: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html
  #
  # Certain AMI virtualization types are incompatible with certain instance types.
  # HVM AMI types are recommended since they are compatible with most instance types.
  #
  # Compatibility matrix: https://aws.amazon.com/amazon-linux-ami/instance-type-matrix/
  #
  # Red Hat Enterprise Linux AMI IDs: http://aws.amazon.com/partners/redhat/
  #
  # We support RHEL and CentOS 6.5, 6.7, 6.8, 7.1, 7.2, and 7.3.
  # RHEL 7.2 is supported only for Cloudera Manager and CDH 5.7 and higher.
  # RHEL 6.8 and 7.3 are supported only for Cloudera Manager and CDH 5.10 and higher.
  #
  # To use Amazon EC2 D2 instances, you must run a minimum version of RHEL 6.7 or CentOS 6.7

  image: ami-HVM-REPLACE-ME

  #
  # Name of the IAM Role to use for this instance type
  # http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html
  #

  # iamProfileName: iam-profile-REPLACE-ME

  tags {
    owner: ${?USER}
  }

  bootstrapScripts: ["""#!/bin/sh

# This is an embedded bootstrap script that runs as root and can be used to customize
# the instances immediately after boot and before any other Cloudera Altus Director action

# Use exit code 0 to indicate success
# Use exit code 91 indicate an unretryable failure
# Cloudera Altus Director will automatically retry script execution for all other exit codes

echo 'Hello World!'
exit 0

"""]

  # For more complex scripts, embedded bootstrap scripts can be supplied via local
  # filesystem paths. They will run after any scripts supplied in the previous
  # bootstrapScripts section.
  # bootstrapScriptsPaths: ["/tmp/test-script.sh",
  #                         "/tmp/test-script.py"]

  #
  # Flag indicating whether to normalize the instance. Not setting normalization here implies that your
  # bootstrap script will take care of normalization. This is an advanced configuration that will require
  # assistance from Cloudera support.
  #
  # Defaults to true
  #

  # normalizeInstance: true

  #
  # Configuration allowing for granular control over the normalization steps of an instance.
  # By default, all of these steps are on. This is an advanced configuration. None of these steps
  # will run if normalizeInstance is set to false.
  #
  # Normalization includes:
  #   prewarming the parcel directory
  #   downloading, installing, and adjusting packages
  #   minimizing swappiness
  #   increasing the maximun number of open files
  #   resizing the root partition
  #   mounting ephemeral disks

  # normalizationConfig {
  #   prewarmDirectory: true
  #   installPackages: true
  #   miscellaneousServiceAdjustment: true
  #   minimizeSwappiness: true
  #   increaseMaxNumberOfOpenFiles: true
  #   resizeRootPartition: true
  #   mountAllUnmountedDisks: true
  # }
}

#
# A list of instance types to use for groups of nodes or management services. Instances
# specified here inherit from the common-instance-properties properties specified above.
#

instances {

  m42x: ${common-instance-properties} {
    type: m4.2xlarge

    #
    # The properties inherited from the provider section or common-instance-properties can
    # be overridden for each instance template.
    # These properties include:
    #

    # image: ami-REPLACE-ME
    # securityGroupsIds: sg-REPLACE-ME
    # subnetId: subnet-REPLACE-ME
    # rackId: "/default"
  }

  m44x: ${common-instance-properties} {
    type: m4.4xlarge
  }

  c34x: ${common-instance-properties} {
    type: c3.4xlarge
  }

  c38x: ${common-instance-properties} {
    type: c3.8xlarge
  }

  c44x: ${common-instance-properties} {
    type: c4.4xlarge
  }

  i2x: ${common-instance-properties} {
    type: i2.xlarge
  }

  i22x: ${common-instance-properties} {
    type: i2.2xlarge
  }

  d2x: ${common-instance-properties} {
    type: d2.xlarge
  }

  d22x: ${common-instance-properties} {
    type: d2.2xlarge
  }

  d24x: ${common-instance-properties} {
    type: d2.4xlarge
  }

  t2l: ${common-instance-properties} {   # only suitable as a gateway
    type: t2.large
  }
}

#
# Optional external database server configuration.
#
# Cloudera Altus Director can create databases on existing database servers or
# provision RDS database servers on-demand.
#
# Services that use databases (e.g., Hive, Hue, and Oozie) require use of an
# external highly available database ensure high availability of the service.
#

databaseServers {
  #
  #Example RDS database server template
  #
  rdsmysqlprod1 { # database server name
    type: mysql
    user: dbrootuser-REPLACEME
    password: dbrootpassword-REPLACEME
    instanceClass: dbinstanceClass-REPLACEME
    dbSubnetGroupName: dbsubnet-REPLACE-ME
    vpcSecurityGroupIds: sg-REPLACE-ME
    allocatedStorage: 10
    engineVersion: 5.5.53
    multiAZ: true
    tags {
      owner: ${?USER}
    }
  }

  #    existingmysql1 {
  #        type: mysql
  #        host: REPLACE-ME # with IP address of database server
  #        port: 3306
  #        user: root
  #        password: rootpassword
  #    }
  #
  #    existingpostgres1 {
  #        type: postgresql
  #        host: REPLACE-ME # with IP address of database server
  #        port: 5432
  #        user: postgres
  #        password: rootpassword
  #    }

}

#
# Configuration for Cloudera Manager. Cloudera Altus Director can use an existing Cloudera Manager
# or bootstrap everything from scratch for a new cluster
#

cloudera-manager {

  instance: ${instances.m42x} {
    #
    # The properties inherited from the provider section, common-instance-properties or
    # instance template can be overriden for the Cloudera Manager instance.
    # These properties include:
    #

    # image: ami-REPLACE-ME
    # securityGroupsIds: sg-REPLACE-ME
    # subnetId: subnet-REPLACE-ME
    # rackId: "/default"

    tags {
      # add any additional tags as needed
      application: "Cloudera Manager 5"
    }
  }

  #
  # Licensing configuration
  #
  # There are three mutually exclusive options for setting up Cloudera Manager's license.
  # 1. License text may be embedded in this file using the "license" field. Triple quotes (""")
  #    are recommended for including multi-line text strings.
  # 2. The "licensePath" can be used to specify the path to a file containing the license.
  # 3. The "enableEnterpriseTrial" flag indicates whether the 60-Day Cloudera Enterprise Trial
  #    should be activated when no license is present. This must not be set to true if a
  #    license is included using either "license" or "licensePath".

  #
  # Embed a license for Cloudera Manager
  #

  # license: """
  #   -----BEGIN PGP SIGNED MESSAGE-----
  #   Hash: SHA1
  #
  # {
  #   "version"        : 1,
  #   "name"           : "License Owner",
  #   "uuid"           : "license id",
  #   "expirationDate" : 0,
  #   "features"       : [ "FEATURE1", "FEATURE2" ]
  # }
  # -----BEGIN PGP SIGNATURE-----
  # Version: GnuPG v1.4.11 (GNU/Linux)
  #
  # PGP SIGNATURE
  # -----END PGP SIGNATURE-----
  # """

  #
  # Include a license for Cloudera Manager from an external file
  #

  # licensePath: "/path/to/license.txt.asc"

  #
  # Specify the billingId.
  # The billingId is used for billing and metering service pay-as-you-go (PAYG) payment model.
  # To get a billing id, you need to purchase a Cloudera enterprise license and get the
  # license key and billing id from Cloudera sales support team.
  #

  # billingId: billingId-REPLACE-ME

  #
  # Activate 60-Day Cloudera Enterprise Trial
  #

  enableEnterpriseTrial: true

  #
  # Install unlimited strength JCE policy files along with Cloudera Manager
  #

  # unlimitedJce: true

  #
  # Automatic TLS
  #

  #
  # Set up TLS connections automatically between Cloudera Altus Director and Cloudera Manager,
  # as well as among the cluster services. Automatic TLS includes installation of
  # unlimited strength JCE policy files (see unlimitedJce).
  #

  # tlsEnabled: true

  #
  # Pass TLS configuration properties to Cloudera Manager to refine how automatic TLS
  # is configured. All TLS configuration properties are optional and have sane defaults.
  # Additional properties are available beyond those listed here.
  #

  # tlsConfigurationProperties {
  #    subject_suffix: "O=example.com,L=Cityville,ST=CA,C=US"
  #    ca_sig_hash_algo: "SHA512"
  #    email_address: "name@example.com"
  # }

  #
  # Optional database configuration
  #
  # There are three mutually exclusive options for database usage in Cloudera Altus Director.
  # 1. With no configuration, embedded PostgreSQL databases will be used.
  # 2. Alternatively, existing external databases can be used.
  # 3. Finally, databases can be created on the fly on existing external database servers.

  #
  # Optional configuration for existing external databases
  #
  # databases {
  #     CLOUDERA_MANAGER {
  #         type: postgresql
  #
  #         host: db.example.com
  #         port: 123
  #
  #         user: admin
  #         password: 1231ed
  #
  #         name: scm
  #     }
  #
  #     ACTIVITYMONITOR { ... }
  #
  #     REPORTSMANAGER { ... }
  #
  #     NAVIGATOR { ... }
  #
  #     # Added in Cloudera Manager 5.2+
  #     NAVIGATORMETASERVER { ... }
  # }

  #
  # Optional configuration for creating external databases on the fly
  #
  # When a database is created on the fly, Director generates a random database name using the specified database
  # name prefix, a random username based on the specified username prefix, and a random password. The password is
  # stored by Director and made available to the service that uses the database. If multiple services reference the
  # same external database server, Director will create a database for each.
  #
  # MySQL limits usernames to sixteen characters. Therefore, limit usernamePrefix values for databases on MySQL to
  # seven characters; the remaining nine characters are used by the randomized suffix generated by Director.
  #

  databaseTemplates {
    CLOUDERA_MANAGER {
      name: cmtemplate
      databaseServerName: rdsmysqlprod1 # Must correspond to an external database server named above
      databaseNamePrefix: scm
      usernamePrefix: cmadmin
    }

    ACTIVITYMONITOR {
      name: amontemplate
      databaseServerName: rdsmysqlprod1 # Must correspond to an external database server named above
      databaseNamePrefix: amon
      usernamePrefix: amadmin
    }

    REPORTSMANAGER {
      name: rmantemplate
      databaseServerName: rdsmysqlprod1 # Must correspond to an external database server named above
      databaseNamePrefix: rman
      usernamePrefix: rmadmin
    }

    NAVIGATOR {
      name: navtemplate
      databaseServerName: rdsmysqlprod1 # Must correspond to an external database server named above
      databaseNamePrefix: nav
      usernamePrefix: nadmin
    }

    # Added in Cloudera Manager 5.2+
    NAVIGATORMETASERVER {
      name: navmetatemplate
      databaseServerName: rdsmysqlprod1 # Must correspond to an external database server named above
      databaseNamePrefix: navmeta
      usernamePrefix: nmadmin
    }
  }

  #
  # Configuration to override Cloudera Manager package repositories
  #

  # NOTE: Cloudera Manager version 5.5 onward is required for setting up highly available
  # clusters with Cloudera Altus Director.
  #
  repository: "https://archive.cloudera.com/cm6/6.0/redhat7/yum/"
  repositoryKeyUrl: "https://archive.cloudera.com/cm6/6.0/redhat7/yum/RPM-GPG-KEY-cloudera"

  # Optional custom service descriptors for external parcels
  # csds: [
  #   "https://archive.cloudera.com/exampleProduct/csd/example-csd.jar"
  # ]
}

#
# Highly Available Cluster description
#

cluster {

  # List the products and their versions that need to be installed.
  # These products must have a corresponding parcel in the parcelRepositories
  # configured above. The specified version will be used to find a suitable
  # parcel. Specifying a version that points to more than one parcel among
  # those available will result in a configuration error. Specify more granular
  # versions to avoid conflicts.

  products {
    CDH: 6
    # EXAMPLEPRODUCT: 1
  }

  #
  # Optional override of CDH parcel repositories
  #

  #
  parcelRepositories: ["https://archive.cloudera.com/cdh6/6.0/parcels/"]

  services: [HDFS, YARN, ZOOKEEPER, HBASE, HIVE, HUE, OOZIE, SPARK_ON_YARN,
    KAFKA, SOLR, FLUME, IMPALA, SQOOP_CLIENT, KS_INDEXER, KUDU]

  #
  # Optional custom service configurations
  # Configuration keys containing periods must be enclosed in double quotes.
  #

  configs {
    # HDFS fencing should be set to true for HA configurations
    HDFS {
      dfs_ha_fencing_methods: "shell(true)"
    }

    # OOZIE requires a load balancer specifically for high availability.
    # Director does not create or manage the load balancer.
    #
    # The load balancer must be configured with the IPs of the oozie servers
    # after the cluster completes bootstrapping.
    OOZIE {
      oozie_load_balancer: "example.com:11000"
    }
  }

  #
  # High availibility configuration requires external databases to be defined for the
  # Hive Metastore, Hue, and Oozie services. These databases may be configured either
  # as existing external databases using the "databases" block below, or as "databaseTemplate"
  # to be created on a databaseServer.
  #

  #
  # Optional configuration for existing external database for Hive Metastore, Hue,
  # and Oozie databases
  #

  # databases {
  #     HIVE {
  #         type: postgresql
  #         host: db.example.com
  #         port: 123
  #         user: hive
  #         password: pass
  #         name: hive_db
  #     }
  #     HUE {
  #         type: postgresql
  #         host: db.example.com
  #         port: 123
  #         user: hue
  #         password: pass
  #         name: hue_db
  #     }
  #     OOZIE {
  #         type: postgresql
  #         host: db.example.com
  #         port: 123
  #         user: oozie
  #         password: pass
  #         name: oozie_db
  #     }
  # }

  #
  # Optional configuration for creating external database on the fly for Hive Metastore
  # Hue, and Oozie databases
  #

  databaseTemplates: {

    HIVE {
      name: hivetemplate
      databaseServerName: rdsmysqlprod1 # Must correspond to an external database server named above
      databaseNamePrefix: hivemetastore
      usernamePrefix: hive
    }

    HUE {
      name: huetemplate
      databaseServerName: rdsmysqlprod1 # Must correspond to an external database server named above
      databaseNamePrefix: huedb
      usernamePrefix: hue
    }

    OOZIE {
      name: oozietemplate
      databaseServerName: rdsmysqlprod1 # Must correspond to an external database server named above
      databaseNamePrefix: ooziedb
      usernamePrefix: oozie
    }
  }

  #
  # This reference configuration file divides the master roles into three separate virtual
  # instance groups, "hdfsmasters-1", "hdfsmasters-2", "masters-1", and "masters-2". The split
  # between the "hdfsmasters" and "masters" groups is due to a difference in the recovery methods
  # for the different services.
  #
  # HDFS master roles are placed separately than non-HDFS master roles in this sample cluster
  # because recovery from NameNode instance failures is performed through Cloudera Manager's
  # MigrateRoles command.
  # http://www.cloudera.com/content/cloudera/en/documentation/core/latest/topics/admin_nn_migrate_roles.html
  #

  hdfsmasters-1 {
    count: 2

    instance: ${instances.i22x} {
      #
      # The properties inherited from the provider section or common-instance-properties or
      # instance template can be overridden for each instance group.
      # These properties include:
      #

      # image: ami-REPLACE-ME
      # securityGroupsIds: sg-REPLACE-ME
      # subnetId: subnet-REPLACE-ME
      # rackId: "/default"

      tags {
        group: hdfsmasters-1
      }
    }

    roles {
      HDFS: [NAMENODE, FAILOVERCONTROLLER, JOURNALNODE]
    }

    # NameNode nameservice, autofailover, and quorum journal name must be configured for high availability
    configs {
      HDFS {
        NAMENODE {
          dfs_federation_namenode_nameservice: hanameservice
          autofailover_enabled: true
          dfs_namenode_quorum_journal_name: hanameservice
        }
      }
    }
  }

  hdfsmasters-2 {
    count: 1

    instance: ${instances.i22x} {
      tags {
        group: hdfsmasters-2
      }
    }

    roles {
      HDFS: [JOURNALNODE, HTTPFS] # HTTPFS role needed for HUE
    }
  }

  masters-1 {
    count: 2

    instance: ${instances.i22x} {
      tags {
        group: masters-1
      }
    }

    # HIVESERVER2 roles need a SPARK role (such as gateway) on the same
    # instance to pick up Spark configurations
    roles {
      # ZooKeeper uses majority quorum for r/w, configure odd number of servers.
      ZOOKEEPER: [SERVER]
      HIVE: [HIVESERVER2, HIVEMETASTORE]
      YARN: [RESOURCEMANAGER]
      SPARK_ON_YARN: [GATEWAY]
      HBASE: [MASTER]
      HUE: [HUE_SERVER]
      OOZIE: [OOZIE_SERVER]
      # Kudu master uses majority quorum for r/w, configure odd number of servers.
      KUDU: [KUDU_MASTER]
    }

    configs {
      # Oozie plugins must be configured for high availability
      OOZIE {
        OOZIE_SERVER {
          oozie_plugins_list: "org.apache.oozie.service.ZKLocksService,org.apache.oozie.service.ZKXLogStreamingService,org.apache.oozie.service.ZKJobsConcurrencyService,org.apache.oozie.service.ZKUUIDService"
        }
      }

      # HIVESERVER2 requires a load balancer specifically for high availability.
      # Director does not create or manage the load balancer.
      #
      # The load balancer must be configured with the IPs of the Hive servers
      # after the cluster completes bootstrapping.
      HIVE {
        HIVESERVER2 {
          hiverserver2_load_balancer: "example.com:11000"
        }
      }

      KUDU {
        KUDU_MASTER {
          # The master rarely performs IO. If fs_data_dirs is unset, it will
          # use the same directory as fs_wal_dir
          fs_wal_dir: "/data0/kudu/masterwal"
          fs_data_dirs: "/data1/kudu/master"
        }
      }
    }
  }

  masters-2 {
    count: 1

    instance: ${instances.i22x} {
      tags {
        group: master
      }
    }

    roles {
      # ZooKeeper uses majority quorum for r/w, configure odd number of servers.
      ZOOKEEPER: [SERVER]
      YARN: [JOBHISTORY]
      HBASE: [HBASETHRIFTSERVER] # HBASETHRIFTSERVER role needed for HUE
      HUE: [HUE_LOAD_BALANCER]
      SPARK_ON_YARN: [SPARK_YARN_HISTORY_SERVER]
      KAFKA: [KAFKA_BROKER, KAFKA_MIRROR_MAKER]
      SOLR: [SOLR_SERVER]
      IMPALA: [CATALOGSERVER, STATESTORE]
      KS_INDEXER: [HBASE_INDEXER]
      # Kudu master uses majority quorum for r/w, configure odd number of servers.
      KUDU: [KUDU_MASTER]
    }

    configs {

      #   KAFKA {
      #      KAFKA_BROKER {
      #        broker_max_heap_size: 512
      #        "log.dirs": /data0/kafka/data
      #      }
      #      KAFKA_MIRROR_MAKER {
      #        "source.bootstrap.servers": "sourcebroker1:9092"
      #        "bootstrap.servers": "destinationbroker1:9092"
      #        whitelist: mytopic1
      #      }
      #   }

      KUDU {
        KUDU_MASTER {
          # The master rarely performs IO. If fs_data_dirs is unset, it will
          # use the same directory as fs_wal_dir
          fs_wal_dir: "/data0/kudu/masterwal"
          fs_data_dirs: "/data1/kudu/master"
        }
      }
    }
  }

  workers {
    count: 9
    #
    # Minimum number of instances required to set up the cluster.
    # Fail and quit if minCount number of instances is not available in this cloud
    # environment. Else, continue setting up the cluster.
    #
    minCount: 5

    instance: ${instances.d22x} {

      #
      # The inherited properties can be overridden
      #

      # image: ami-REPLACE-ME
      # subnetId: subnet-REPLACE-ME
      # rackId: "/default"

      # Put all cluster nodes in a placement group for improved network performance
      # Note: this only works for a limited set of instances
      # http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html

      # placementGroup: REPLACE-ME

      tags {
        group: worker
      }
    }

    roles {
      HDFS: [DATANODE]
      YARN: [NODEMANAGER]
      HBASE: [REGIONSERVER]
      FLUME: [AGENT]
      IMPALA: [IMPALAD]
      KUDU: [KUDU_TSERVER]
    }

    # Optional custom role configurations
    # Configuration keys containing periods must be enclosed in double quotes.
    configs {
      KUDU {
        KUDU_TSERVER {
          # Set fs_wal_dir to an SSD drive (if exists) for better performance.
          # Set fs_data_dirs to a comma-separated string containing all remaining
          # disk drives, solid state or otherwise.
          # If there are multiple drives in the machine, it's best to ensure that
          # the WAL directory is not located on the same disk as a tserver data
          # directory.
          fs_wal_dir: "/data0/kudu/tabletwal"
          fs_data_dirs: "/data1/kudu/tablet"
        }
      }
    }
  }

  gateways {
    count: 1

    instance: ${instances.t2l} {
      tags {
        group: gateway
      }
    }

    roles {
      HBASE: [GATEWAY]
      HIVE: [GATEWAY]
      KAFKA: [GATEWAY]
      SOLR: [GATEWAY]
      SQOOP_CLIENT: [GATEWAY]
    }

    # Optional custom role configurations
    # Configuration keys containing periods must be enclosed in double quotes.
    # configs {
    # }
  }
}
